% --- Parameters ------------------------------------------
glacier = evalin('base','glacier');
% Geometry
switch glacier
   case 'KAK' %%{{{
      surface_select = 'GIMP'; %'AERO+GIMP';
      velocity_select = 'MEaSUREs'; %'Landsat+MEaSUREs';
      velocity_scalefactor_MEaSUREs = 1.00;
      velocity_scalefactor_Landsat  = 1.00;
      
      fill_nunataks = false;

      epoch = 1985;

      % SMB
      smb_source = 'RACMO';
      smb_type = 'yearly';
      smb_datayears  = [epoch:2015];
      smb_modelyears = smb_datayears - epoch;

      % Viscocity
      ice_temp = -10; % deg C
   %%}}}
   case 'UMI' %%{{{
      surface_select = 'AERO+GIMP';
      velocity_select = 'Landsat+MEaSUREs';
      velocity_scalefactor_MEaSUREs = 0.50;
      velocity_scalefactor_Landsat  = 1.00;
      
      fill_nunataks = false;

      % SMB
      smb_source = 'RACMO';
      smb_type = 'yearly';
      smb_datayears  = [2000:2015];
      smb_modelyears = [   0:  15];

      % Viscocity
      ice_temp = -10; % deg C
   %%}}}
   case 'HEL' %%{{{
      surface_select = 'AERO+GIMP';
      velocity_select = 'MEaSUREs+Landsat';
      velocity_scalefactor_MEaSUREs = 0.80;
      velocity_scalefactor_Landsat  = 1.00;
      
      fill_nunataks = false;

      epoch = 1981;

      % SMB
      smb_source = 'RACMO';
      smb_type = 'yearly';
      smb_datayears  = [epoch:2015];
      smb_modelyears = smb_datayears - epoch;

      % Viscocity
      ice_temp = -5; % deg C
      %ice_temp = 'linear';
      %ice_temp_x = 313000;
      %ice_temp_y = -2578000;
      %ice_temp_margin = -5; % deg C
      %ice_temp_interior = -10; % deg C
      ice_temp = 'two_regions_x';
      ice_temp_x = 3e5;
      ice_temp_negx = -10; % deg C
      ice_temp_posx =  -5; % deg C
   %%}}}
   case 'KLG' %%{{{
      surface_select = 'AERO+GIMP';
      velocity_select = 'Landsat+MEaSUREs';
      velocity_scalefactor_MEaSUREs = 0.50;
      velocity_scalefactor_Landsat  = 0.70;
      
      fill_nunataks = false;

      epoch = evalin('base','glacier_epoch');;

      % SMB
      smb_source = 'RACMO';
      smb_type = 'yearly';
      smb_datayears  = [epoch:2015];
      smb_modelyears = smb_datayears - epoch;

      % Viscocity
      ice_temp = -7; % deg C
   %%}}}
   case 'SIL' %%{{{
      surface_select = 'AERO';
      velocity_select = 'MEaSUREs';
      velocity_scalefactor_MEaSUREs = 0.60;
      
      fill_nunataks = false;

      % SMB
      smb_source = 'RACMO';
      smb_type = 'yearly';
      smb_datayears  = [2000:2015];
      smb_modelyears = [   0:  15];

      % Viscocity
      ice_temp = -10; % deg C
   %%}}}
end

% --- Parameters ------------------------------------------

% Lonestar5
%
% For submitting jobs to Lonestar5, set md.settings.waitonlock to NaN. This
% is to prevent the script from automatically checking whether the job has completed,
% which asks for (1) TACC password and (2) TFA token every time!
%
% If TACC offers a way around this for Lonestar5, can set this to some reasonable value.
%
if strcmpi(md.cluster.name, 'ls5')
	md.settings.waitonlock = nan;
end

%%{{{ Geometry and ice mask
disp('   Setting up geometry');
disp('      -- Reading MC bed ');
md.geometry.bed  = interpBedmachineGreenland(md.mesh.x,md.mesh.y,'bed');
pos=find(isnan(md.geometry.bed));
if ~isempty(pos)
	disp('      -- fill in the blanks with Bamber 2013');
	md.geometry.bed(pos) = interpBamber2013(md.mesh.x(pos),md.mesh.y(pos),'BedrockElevation');
end
switch surface_select
   case 'GIMP'
      disp('      -- reading Howat surface');
      md.geometry.surface=interpBedmachineGreenland(md.mesh.x,md.mesh.y,'surface');
   
   case 'AERO'
      disp('      -- reading AERO DEM surface');
      md.geometry.surface  = interpAEROdem(md.mesh.x,md.mesh.y);

   case 'AERO+GIMP'
      disp('      -- loading combined AERO+GIMP surface');
      md.geometry.surface = interpCombinedSurfaceGreenland(md.mesh.x,md.mesh.y);

   otherwise
      fprintf(['\n\033[' '103;30' 'm   WARNING: invalid option for surface selected in Par/Greenland.par. Surface not loaded!\n' '\033[0m \n\n']);
end
disp('      -- Calculating ice thickness');
md.geometry.thickness = md.geometry.surface - md.geometry.bed;
%pos=find(md.mask.groundedice_levelset<0);
%H = interpBedmachineGreenland(md.mesh.x,md.mesh.y,'thickness');
%md.geometry.thickness(pos) = H(pos);

disp('   Interpolating mask');
% 0 = ocean, 1 = ice-free land, 2 = grounded ice, 3 = floating ice, 4 = non-Greenland land
md.mask.ice_levelset         = -1*ones(md.mesh.numberofvertices,1);
md.mask.ocean_levelset       = +1*ones(md.mesh.numberofvertices,1);
mask = interpBedmachineGreenland(md.mesh.x,md.mesh.y,'mask');
filename = ['Exp/' evalin('base','glacier') '_Front0.exp'];
if exist(filename,'file')
   disp(['      -- Extending ice mask to retreated ice using ' filename])
   pos = ContourToNodes(md.mesh.x,md.mesh.y,filename,2); % finds nodes inside the "retreated portion"
   newmask = mask;
   newmask(mask==0 & pos) = 2; % if MC bed mask has ocean (==0) and we're inside the "retreated portion", set to ice (==2)
   mask = newmask;
   clear newmask;
else
   if strcmp(surface_select, 'AERO')
      disp('      WARNING in Greenland.par: using AERO DEM but MC bed mask. These may be incompatible.')
   end
end
pos = find(mask<2);
md.mask.ice_levelset(pos)=1;

% Check for stranded ice (solitary nodes that are ice surrounded by not ice)
[stranded_nodes clean_mask_or_levelset] = remove_stranded_ice_spclevelset(md,'ice_levelset');
if sum(stranded_nodes) > 0
   fprintf(['\n\033[' '103;30' 'm   WARNING: Found ' sprintf('%5d',sum(stranded_nodes)) ' stranded ice nodes in ice_levelset. \033[0m \n', ...
              '\033[' '103;30' 'm            Run [stranded_nodes clean_mask_or_levelset] = check_levelset_plots(md, ''ice_levelset''); \033[0m \n', ...
              '\033[' '103;30' 'm            to check and adjust Front0 exp file. \033[0m \n\n']);
end

% Set the grounded ice mask to the ice mask ... later, we'll determine what's floating based on the thickness + bed
%pos = find(mask==0 | mask==3);
%md.mask.groundedice_levelset(pos)=-1;
md.mask.ocean_levelset = -md.mask.ice_levelset;

% Fill nunataks with 10 m of ice to provide some "lateral drag" in the model
%%{{{
if fill_nunataks
	fprintf(['\n\033[' '103;30' 'm   WARNING: Filling nunataks with 10 m of ice. \033[0m \n']);
   % Vertices that are on land in the mask
   nunataks = mask == 1;

   % Set ice thickness there to 10m
   md.geometry.thickness(nunataks) = 10;
   md.geometry.surface(nunataks) = md.geometry.bed(nunataks) + md.geometry.thickness(nunataks);

   % Change ice mask there
   md.mask.ice_levelset(nunataks)         = -1;
   %md.mask.groundedice_levelset(nunataks) = +1;
end
%%}}}

%Correction if H<0
pos=find(md.geometry.thickness<=0);
if ~isempty(pos),
	md.geometry.thickness(pos)=10;
end

% disp('      Adjusting ice mask');
% %Tricky part here: we want to offset the mask by one element so that we don't end up with a cliff at the transition
% pos = find(max(md.mask.ice_levelset(md.mesh.elements),[],2)>0);
% md.mask.ice_levelset(md.mesh.elements(pos,:)) = 1;

%Set up the base as the difference between S and H
md.geometry.base=md.geometry.surface-md.geometry.thickness;

% disp('      -- initializing thickness beyond current front');
% pos = find(md.mask.ice_levelset>0);
% md.geometry.thickness(pos) = 10;
% md.geometry.surface(pos) = md.geometry.bed(pos)+10; %Minimum thickness
% md.geometry.base=md.geometry.surface-md.geometry.thickness;

disp('      -- ice shelf base based on hydrostatic equilibrium');
di=md.materials.rho_ice/md.materials.rho_water;
md.mask.ocean_levelset = -md.geometry.thickness+md.geometry.bed/di;
pos = find(md.mask.ocean_levelset>0); % & md.mask.ice_levelset<0);
md.geometry.surface(pos)= md.geometry.thickness(pos)*(md.materials.rho_water-md.materials.rho_ice)/md.materials.rho_water;
md.geometry.base = md.geometry.surface - md.geometry.thickness;
%surface_floating = md.geometry.surface;
%surface_floating(pos) = md.geometry.thickness(pos)*(md.materials.rho_water-md.materials.rho_ice)/md.materials.rho_water;
%md.geometry.base(pos) = surface_floating(pos) - md.geometry.thickness(pos);
pos=find(md.geometry.base<md.geometry.bed);
md.geometry.bed(pos) = md.geometry.base(pos);
%%}}}
disp ' '

%%{{{ Velocity
%Get observed velocity field on mesh nodes
switch velocity_select
   case 'MEaSUREs'
      disp('      -- Loading MEaSUREs velocity composite');
      [velx, vely] = interpJoughinCompositeGreenland(md.mesh.x,md.mesh.y);
      if velocity_scalefactor_MEaSUREs ~= 1.0
         fprintf('      -- Scaling velocity by %4.1f\n', velocity_scalefactor_MEaSUREs);
         velx = velocity_scalefactor_MEaSUREs .* velx;
         vely = velocity_scalefactor_MEaSUREs .* vely;
      end

   case 'Landsat'
      disp('      -- Loading Landsat velocity');
      [velx, vely] = interpLandsatVelocityGreenland(md.mesh.x,md.mesh.y);

   case {'MEaSUREs+Landsat', 'Landsat+MEaSUREs'}
      disp(['      -- Loading combined ' velocity_select ' velocity']);
      [velx, vely] = interpCombinedVelocityGreenland(md.mesh.x,md.mesh.y,velocity_scalefactor_MEaSUREs,velocity_scalefactor_Landsat,velocity_select);

   otherwise
      fprintf(['\n\033[' '103;30' 'm   WARNING: invalid option for velocity selected in Par/Greenland.par. Velocity not loaded!\n' '\033[0m \n\n']);
      %year = 2000;
      %disp(['      -- Loading velocity year ' num2str(year) ' data']);
      %[velx, vely] = interpJoughin(md.mesh.x,md.mesh.y,year);

      %loc = 'Wcoast-72.00N'; dte = '2000-08'; % UMI
      %loc = 'Wcoast-70.90N'; dte = '2001-08'; % SIL
      %loc = 'Wcoast-70.55N'; dte = '2000-09'; % LIL
      %loc = 'Wcoast-69.95N'; dte = '2000-08'; % EQI
      %disp(['      -- Loading optical velocity for location ' loc ' and date ' dte]);
      %[velx, vely] = interpOpticalVel(md.mesh.x,md.mesh.y,loc,dte);

end

md.inversion.vx_obs=velx;
md.inversion.vy_obs=vely;
pos=find(isnan(md.inversion.vx_obs) | isnan(md.inversion.vy_obs));
md.inversion.vx_obs(pos)=0;
md.inversion.vy_obs(pos)=0;
md.inversion.vel_obs  = sqrt(md.inversion.vx_obs.^2+md.inversion.vy_obs.^2);
md.initialization.vx  = md.inversion.vx_obs;
md.initialization.vy  = md.inversion.vy_obs;
md.initialization.vz  = zeros(md.mesh.numberofvertices,1);
md.initialization.vel = md.inversion.vel_obs;
%%}}}
disp ' '

% %Where velocity is zero, remove ice
% disp('        -- where velocity is zero, removing ice');
% vel  = sqrt(velx.^2+vely.^2);
% pos = find(md.initialization.vel==0);
% md.mask.ice_levelset(pos)=1;
% md.mask.groundedice_levelset(pos)=-1;

%%{{{ Basal friction
disp('   Initialize basal friction using driving stress');
disp('      -- Compute surface slopes and use 10 L2 projections');
[sx,sy,s]=slope(md); sslope=averaging(md,s,10);
disp('      -- Process surface velocity data');
vel = md.inversion.vel_obs;
flags=(vel==0); pos1=find(flags); pos2=find(~flags);
vel(pos1) = griddata(md.mesh.x(pos2),md.mesh.y(pos2),vel(pos2),md.mesh.x(pos1),md.mesh.y(pos1));
%velmax = max(vel);
%vel(vel==0 & md.mask.ice_levelset<0) = velmax;
disp('      -- Filling in missing ice velocity with MEaSUREs mosaic');
[velx, vely] = interpJoughinCompositeGreenland(md.mesh.x,md.mesh.y);
idx = md.mask.ice_levelset < 0 & isnan(vel);
vel(idx) = sqrt( velx(idx).^2 + vely(idx).^2 );
vel=max(vel,0.1);
disp('      -- Calculate effective pressure');
Neff = md.materials.rho_ice*md.geometry.thickness+md.materials.rho_water*md.geometry.base;
Neff(find(Neff<=0))=1;
disp('      -- Deduce friction coefficient');
md.friction.coefficient=sqrt(md.materials.rho_ice*md.geometry.thickness.*(sslope)./(Neff.*vel/md.constants.yts));
md.friction.coefficient=min(md.friction.coefficient,200);
md.friction.p = 1.0 * ones(md.mesh.numberofelements,1);
md.friction.q = 1.0 * ones(md.mesh.numberofelements,1);
% disp('      -- Extrapolate on ice free and floating ice regions');
% flags=(md.mask.ice_levelset>0) | (md.mask.ocean_levelset<0); pos1=find(flags); pos2=find(~flags);
% %md.friction.coefficient(pos1) = griddata(md.mesh.x(pos2),md.mesh.y(pos2),md.friction.coefficient(pos2),md.mesh.x(pos1),md.mesh.y(pos1),'natural');
% md.friction.coefficient(pos1) = 1;
% pos=find(isnan(md.friction.coefficient));
% md.friction.coefficient(pos)  = 1;
%%}}}
disp ' '

surface_temp_kelvin = min(273.15,interpMODGRNLD(md.mesh.x,md.mesh.y)) + 273.15;

%%{{{ Flow law
fprintf('   Creating flow law parameters');
md.materials.rheology_n = 3*ones(md.mesh.numberofelements,1);
switch class(ice_temp)
   case 'double'
      %fprintf(' (assume ice is at %2d°C)\n', ice_temp);
      %md.materials.rheology_B = cuffey(ice_temp + 273.15)*ones(md.mesh.numberofvertices,1);
		fprintf(' (use md.initialization.temperature)\n');
		md.materials.rheology_B = cuffey(surface_temp_kelvin - 273.15);
   case 'char'
      switch ice_temp
         case 'linear'
            fprintf(' (linearly vary rheology from margin @ %2d°C to interior @ %2d°C)\n', ice_temp_margin, ice_temp_interior);
            pos = find((md.mask.ice_levelset>0).*(md.mesh.vertexonboundary));
            dis = sqrt( (md.mesh.x-ice_temp_x).^2 + (md.mesh.y-ice_temp_y).^2 );
            T = linmap(dis, [ice_temp_margin, ice_temp_interior]);
            md.materials.rheology_B = cuffey(T + 273.15);
         case 'two_regions_x'
            fprintf(' (two regions @ %2d°C and @ %2d°C)\n', ice_temp_posx, ice_temp_negx);
            md.materials.rheology_B = cuffey(ice_temp_negx + 273.15) *ones(md.mesh.numberofvertices,1);
            pos = find(md.mesh.x > ice_temp_x);
            md.materials.rheology_B(pos) = cuffey(ice_temp_posx + 273.15);
         otherwise
            disp 'option for calculating viscosity not supported -- using -10 deg C'
            md.materials.rheology_B = cuffey(-10 + 273.15)*ones(md.mesh.numberofvertices,1);
      end
end
%%}}}
disp ' '

%%{{{ SMB
md.basalforcings.groundedice_melting_rate = zeros(md.mesh.numberofvertices,1);
md.basalforcings.floatingice_melting_rate = zeros(md.mesh.numberofvertices,1);
switch smb_source
   case 'SeaRISE'
      disp('   Loading accumulation rates from SeaRISE');
      md.smb.mass_balance = interpSeaRISE(md.mesh.x, md.mesh.y,'smb') * md.materials.rho_freshwater/md.materials.rho_ice;
   case 'RACMO'
      switch smb_type
         case 'long average'
            disp('   Loading accumulation rates from RACMO (downscaled)');
            md.smb.mass_balance = interpRACMO(md.mesh.x, md.mesh.y, 'smb_downscaled') / md.materials.rho_ice;
         case 'yearly'
            disp('   Loading accumulation rates from RACMO (downscaled)');
            mass_balance = interpRACMO(md.mesh.x, md.mesh.y, 'smb_downscaled', {'years',smb_datayears});
            if ~isempty(mass_balance)
               md.smb.mass_balance = [mass_balance; smb_modelyears];
            else
               md.smb.mass_balance = nan;
            end

            % After 2015, fill in with 2000-2015 mean
            idx_start = find(md.smb.mass_balance(end,:)>=2000-epoch,1,'first');
            idx_end   = find(md.smb.mass_balance(end,:)<=2015-epoch,1,'last');
            smb_mean = mean( md.smb.mass_balance(1:end-1, idx_start:idx_end), 2 );
            md.smb.mass_balance(:,end+1) = [smb_mean; md.smb.mass_balance(end,end)+1];
      end
end

% Extrapolate smb to ice surface where smb == 0 in RACMO
for i = 1:size(md.smb.mass_balance,2)
   pos1 = find( md.smb.mass_balance(1:end-1,i)~=0 & md.mask.ice_levelset<0 );
   pos2 = find( md.smb.mass_balance(1:end-1,i)==0 & md.mask.ice_levelset<0 );
   md.smb.mass_balance(pos2,i) = griddata(md.mesh.x(pos1),md.mesh.y(pos1),md.smb.mass_balance(pos1,i),md.mesh.x(pos2),md.mesh.y(pos2),'nearest');
end

%%}}}
disp ' '

%%{{{ Geothermal heat flux
disp('   Geothermal flux from Shapiro et al.');
md.basalforcings.geothermalflux=interpSeaRISE(md.mesh.x,md.mesh.y,'bheatflx');
%%}}}
disp ' '

%%{{{ Thermal model
disp('   Setting up thermal model');
%md.initialization.temperature=min(0,interpSeaRISE(md.mesh.x,md.mesh.y,'surftemp'))+273.15;
md.initialization.temperature=surface_temp_kelvin;
md.initialization.waterfraction=zeros(md.mesh.numberofvertices,1);
md.initialization.watercolumn=zeros(md.mesh.numberofvertices,1);
md.thermal.spctemperature=md.initialization.temperature;
md.thermal.isenthalpy=1;
md.thermal.isdynamicbasalspc=1;
%%}}}
disp ' '

%%{{{ Boundary conditions
if false
   %Deal with boundary conditions:
   disp('   Set Boundary conditions');
   md.stressbalance.spcvx=NaN*ones(md.mesh.numberofvertices,2);
   md.stressbalance.spcvy=NaN*ones(md.mesh.numberofvertices,1);
   md.stressbalance.spcvz=NaN*ones(md.mesh.numberofvertices,1);
   md.stressbalance.referential=NaN*ones(md.mesh.numberofvertices,6);
   md.stressbalance.loadingforce=0*ones(md.mesh.numberofvertices,3);
   md=SetMarineIceSheetBC(md);
   pos = find(md.mesh.vertexonboundary);
   md.stressbalance.spcvx(pos)=md.inversion.vx_obs(pos);
   md.stressbalance.spcvy(pos)=md.inversion.vy_obs(pos);
   md.stressbalance.spcvz(pos)=0;
end

% What Mathieu does:
disp('   Set Boundary conditions');
md.stressbalance.spcvx=NaN*ones(md.mesh.numberofvertices,1);
md.stressbalance.spcvy=NaN*ones(md.mesh.numberofvertices,1);
md.stressbalance.spcvz=NaN*ones(md.mesh.numberofvertices,1);
md.stressbalance.referential=NaN*ones(md.mesh.numberofvertices,6);
md.stressbalance.loadingforce=0*ones(md.mesh.numberofvertices,3);
pos=find((md.mask.ice_levelset<0).*(md.mesh.vertexonboundary));
% % TEMPORARY
% filename = ['Exp/HEL_BC_temporary.exp'];
% pos = find(ContourToNodes(md.mesh.x,md.mesh.y,filename,2) .* md.mesh.vertexonboundary);
md.stressbalance.spcvx(pos)=md.initialization.vx(pos);
md.stressbalance.spcvy(pos)=md.initialization.vy(pos);
md.stressbalance.spcvz(pos)=0;

% Constrain where there's inflow
pos = ~outflow(md) & md.mesh.vertexonboundary;

% Thickness constraint
md.masstransport.spcthickness=NaN*ones(md.mesh.numberofvertices,1);
md.masstransport.spcthickness(pos)=md.geometry.thickness(pos);

% Ignore
filename = ['Exp/' glacier '_noConstraint.exp'];
if exist(filename,'file');
   disp(['Removing constraint within: ' filename]);
   pos = find(ContourToNodes(md.mesh.x,md.mesh.y,filename,2));
   md.masstransport.spcthickness(pos)=NaN;
end

% % ... the hard way
% exp_struct = expread(['Exp/' glacier '.exp']);
% 
% % 1 m in the direction of velocity
% v_vec = [md.stressbalance.spcvx(pos) md.stressbalance.spcvy(pos)];
% check_points = zeros(length(pos), 2);
% for i = 1:length(pos)
%    check_points(i,:) = [md.mesh.x(pos(i)) md.mesh.y(pos(i))] + 10 .* v_vec(i,:)./norm(v_vec(i,:));
% end
% in = inpolygon(check_points(:,1), check_points(:,2), exp_struct.x, exp_struct.y);
% 
% % Thickness constraint
% md.masstransport.spcthickness=NaN*ones(md.mesh.numberofvertices,1);
% md.masstransport.spcthickness(pos(in))=md.geometry.thickness(pos(in));
%}}}
disp ' '

